<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.Common</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.Common.CallingInfo">
            <summary>
            Information about the calling method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.AssemblyName">
            <summary>
            The name of the assembly the method is in
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.ClassName">
            <summary>
            The class name of the method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.Namespace">
            <summary>
            The namespace of the method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.LineNumber">
            <summary>
            The line number where the call was made from
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.MethodName">
            <summary>
            The name of the method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.FileName">
            <summary>
            The file name of the assembly
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CallingInfo.AssemblyVersion">
            <summary>
            The assembly version
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.IniFile">
            <summary>
            Work with a specific INI file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Common.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Common.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="T:KellermanSoftware.Common.CommandLineArguments">
            <summary>
            Parse arguments for a console application
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.CommandLineArguments.#ctor(System.String[])">
            <summary>
             Constructor
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:KellermanSoftware.Common.CommandLineArguments.Parameters">
            <summary>
            Get a list of parameters
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.CompareObjects">
            <summary>
            Class that allows comparison of two objects of the same type to each other.  Supports classes, lists, arrays, dictionaries, child comparison and more.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.ElementsToIgnore">
            <summary>
            Ignore classes, properties, or fields by name during the comparison.
            Case sensitive.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.ComparePrivateProperties">
            <summary>
            If true, private properties will be compared. The default is false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.ComparePrivateFields">
            <summary>
            If true, private fields will be compared. The default is false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.CompareChildren">
            <summary>
            If true, child objects will be compared. The default is true. 
            If false, and a list or array is compared list items will be compared but not their children.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.CompareReadOnly">
            <summary>
            If true, compare read only properties (only the getter is implemented).
            The default is true.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.CompareFields">
            <summary>
            If true, compare fields of a class (see also CompareProperties).
            The default is true.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.CompareProperties">
            <summary>
            If true, compare properties of a class (see also CompareFields).
            The default is true.
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.MaxDifferences">
            <summary>
            The maximum number of differences to detect
            </summary>
            <remarks>
            Default is 1 for performance reasons.
            </remarks>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.Differences">
            <summary>
            The differences found during the compare
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.CompareObjects.DifferencesString">
            <summary>
            The differences found in a string suitable for a textbox
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.Compare(System.Object,System.Object)">
            <summary>
            Compare two objects of the same type to each other.
            </summary>
            <remarks>
            Check the Differences or DifferencesString Properties for the differences.
            Default MaxDifferences is 1
            </remarks>
            <param name="object1"></param>
            <param name="object2"></param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.Compare(System.Object,System.Object,System.String)">
            <summary>
            Compare two objects
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb">Where we are in the object hiearchy</param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareTimespan(System.Object,System.Object,System.String)">
            <summary>
            Compare a timespan struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareEnum(System.Object,System.Object,System.String)">
            <summary>
            Compare an enumeration
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareSimpleType(System.Object,System.Object,System.String)">
            <summary>
            Compare a simple type
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareStruct(System.Object,System.Object,System.String)">
            <summary>
            Compare a struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareClass(System.Object,System.Object,System.String)">
            <summary>
            Compare the properties, fields of a class
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.PerformCompareFields(System.Type,System.Object,System.Object,System.String)">
            <summary>
            Compare the fields of a class
            </summary>
            <param name="t1"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.PerformCompareProperties(System.Type,System.Object,System.Object,System.String)">
            <summary>
            Compare the properties of a class
            </summary>
            <param name="t1"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareIDictionary(System.Object,System.Object,System.String)">
            <summary>
            Compare a dictionary
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.cStr(System.Object)">
            <summary>
            Convert an object to a nicely formatted string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.CompareIList(System.Object,System.Object,System.String)">
            <summary>
            Compare an array or something that implements IList
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:KellermanSoftware.Common.CompareObjects.AddBreadCrumb(System.String,System.String,System.String,System.Int32)">
            <summary>
            Add a breadcrumb to an existing breadcrumb
            </summary>
            <param name="existing"></param>
            <param name="name"></param>
            <param name="extra"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.Compression">
            <summary>
            LZO Compression Compatible with .NET, Silverlight and Windows Phone 7
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Constructor that takes in an IsolatedStorageFile
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.CompressStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compress a stream
            </summary>
            <param name="inputStream"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.DecompressStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompress a stream
            </summary>
            <param name="inputStream"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.CompressFile(System.String,System.String)">
            <summary>Compress a file in isolated storage using LZO compression</summary>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <example>
            	<code title="Example" description="" lang="C#">string inputString = "".PadRight(1000, 'z');
            byte[] inputBytes = Encoding.UTF8.GetBytes(inputString);
             
            #if SILVERLIGHT
            IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication();
            #else
            IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForDomain();
            #endif
             
            //Create the input file
            string inputFilePath = "InputFile.txt";
            using (IsolatedStorageFileStream outputStream = new IsolatedStorageFileStream(inputFilePath, FileMode.Create, FileAccess.Write, FileShare.None, store))
            {
                outputStream.Write(inputBytes,0,inputBytes.Length);
            }
             
            //Compress it
            string compressedPath = "Compressed.txt";
            Compression compression = new Compression(store);
            compression.CompressFile(inputFilePath,compressedPath);
             
            //Decompress
            string uncompressedPath = "Uncompressed.txt";
            compression.DecompressFile(compressedPath,uncompressedPath);</code>
            	<code title="Example2" description="" lang="VB.NET">Dim inputString As String = "".PadRight(1000, "z"c)
            Dim inputBytes() As Byte = Encoding.UTF8.GetBytes(inputString)
             
            #If SILVERLIGHT Then
            Dim store As IsolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication()
            #Else
            Dim store As IsolatedStorageFile = IsolatedStorageFile.GetUserStoreForDomain()
            #End If
             
            'Create the input file
            Dim inputFilePath As String = "InputFile.txt"
            Using outputStream As New IsolatedStorageFileStream(inputFilePath, FileMode.Create, FileAccess.Write, FileShare.None, store)
            	outputStream.Write(inputBytes,0,inputBytes.Length)
            End Using
             
            'Compress it
            Dim compressedPath As String = "Compressed.txt"
            Dim compression As New Compression(store)
            compression.CompressFile(inputFilePath,compressedPath)
             
            'Decompress
            Dim uncompressedPath As String = "Uncompressed.txt"
            compression.DecompressFile(compressedPath,uncompressedPath)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.DecompressFile(System.String,System.String)">
            <summary>Decompress a file in isolated storage using LZO compression</summary>
            <param name="inputFilePath"></param>
            <param name="outputFilePath"></param>
            <example>
            	<code title="Example" description="" lang="C#">string inputString = "".PadRight(1000, 'z');
            byte[] inputBytes = Encoding.UTF8.GetBytes(inputString);
             
            #if SILVERLIGHT
            IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication();
            #else
            IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForDomain();
            #endif
             
            //Create the input file
            string inputFilePath = "InputFile.txt";
            using (IsolatedStorageFileStream outputStream = new IsolatedStorageFileStream(inputFilePath, FileMode.Create, FileAccess.Write, FileShare.None, store))
            {
                outputStream.Write(inputBytes,0,inputBytes.Length);
            }
             
            //Compress it
            string compressedPath = "Compressed.txt";
            Compression compression = new Compression(store);
            compression.CompressFile(inputFilePath,compressedPath);
             
            //Decompress
            string uncompressedPath = "Uncompressed.txt";
            compression.DecompressFile(compressedPath,uncompressedPath);</code>
            	<code title="Example2" description="" lang="VB.NET">Dim inputString As String = "".PadRight(1000, "z"c)
            Dim inputBytes() As Byte = Encoding.UTF8.GetBytes(inputString)
             
            #If SILVERLIGHT Then
            Dim store As IsolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication()
            #Else
            Dim store As IsolatedStorageFile = IsolatedStorageFile.GetUserStoreForDomain()
            #End If
             
            'Create the input file
            Dim inputFilePath As String = "InputFile.txt"
            Using outputStream As New IsolatedStorageFileStream(inputFilePath, FileMode.Create, FileAccess.Write, FileShare.None, store)
            	outputStream.Write(inputBytes,0,inputBytes.Length)
            End Using
             
            'Compress it
            Dim compressedPath As String = "Compressed.txt"
            Dim compression As New Compression(store)
            compression.CompressFile(inputFilePath,compressedPath)
             
            'Decompress
            Dim uncompressedPath As String = "Uncompressed.txt"
            compression.DecompressFile(compressedPath,uncompressedPath)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.CompressBytes(System.Byte[])">
            <summary>Compress the passed in bytes using LZO compression</summary>
            <param name="inputBytes"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">string inputString = "".PadRight(1000, 'z');
            Compression compression = new Compression();
            byte[] inputBytes = Encoding.UTF8.GetBytes(inputString);
            byte[] compressedBytes = compression.CompressBytes(inputBytes);
            byte[] decompressedBytes = compression.DecompressBytes(compressedBytes);</code>
            	<code title="Example2" description="" lang="VB.NET">Dim inputString As String = "".PadRight(1000, "z"c)
            Dim compression As New Compression()
            Dim inputBytes() As Byte = Encoding.UTF8.GetBytes(inputString)
            Dim compressedBytes() As Byte = compression.CompressBytes(inputBytes)
            Dim decompressedBytes() As Byte = compression.DecompressBytes(compressedBytes)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.CompressBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compress a range of bytes using LZO compression
            </summary>
            <param name="inputBytes"></param>
            <param name="inputByteStart"></param>
            <param name="inputByteLength"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Compression.DecompressBytes(System.Byte[])">
            <summary>Decompress the passed bytes using LZO compression</summary>
            <param name="inputBytes"></param>
            <returns></returns>
            <example>
            	<code title="Example" description="" lang="CS">string inputString = "".PadRight(1000, 'z');
            Compression compression = new Compression();
            byte[] inputBytes = Encoding.UTF8.GetBytes(inputString);
            byte[] compressedBytes = compression.CompressBytes(inputBytes);
            byte[] decompressedBytes = compression.DecompressBytes(compressedBytes);</code>
            	<code title="Example2" description="" lang="VB.NET">Dim inputString As String = "".PadRight(1000, "z"c)
            Dim compression As New Compression()
            Dim inputBytes() As Byte = Encoding.UTF8.GetBytes(inputString)
            Dim compressedBytes() As Byte = compression.CompressBytes(inputBytes)
            Dim decompressedBytes() As Byte = compression.DecompressBytes(compressedBytes)</code>
            </example>
        </member>
        <member name="T:KellermanSoftware.Common.ConvertUtil">
            <summary>
            Methods for converting values into specific types
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.ConvertUtil.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An Object that implements the IConvertible interface.</param>
            <param name="conversionType">The Type to which value is to be converted.</param>
            <returns>An object whose Type is conversionType (or conversionType's underlying type if conversionType
            is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value is a null
            reference and conversionType is not a value type.</returns>
            <remarks>
            This method exists as a workaround to System.Convert.ChangeType(Object, Type) which does not handle
            nullables as of version 2.0 (2.0.50727.42) of the .NET Framework. The idea is that this method will
            be deleted once Convert.ChangeType is updated in a future version of the .NET Framework to handle
            nullable types, so we want this to behave as closely to Convert.ChangeType as possible.
            This method was written by Peter Johnson at:
            http://aspalliance.com/author.aspx?uId=1026.
            </remarks>
        </member>
        <member name="M:KellermanSoftware.Common.ConvertUtil.cDbl(System.Object)">
            <summary>
            Convert the string to a double, ignoring nulls using the current culture
            </summary>
            <param name="value">The object or string to parse</param>
            <returns>A double number</returns>
        </member>
        <member name="M:KellermanSoftware.Common.ConvertUtil.ShortToByteArray(System.UInt16)">
            <summary>
            Convert an unsigned short into a byte array
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ConvertUtil.cStr(System.Object)">
            <summary>
            Convert any object to a string
            </summary>
            <param name="value">Object to convert</param>
            <returns>A string or string.empty</returns>
        </member>
        <member name="M:KellermanSoftware.Common.ConvertUtil.cDate(System.Object)">
            <summary>
            Convert the passed object into a date or return the default date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ConvertUtil.cInt(System.Object)">
            <summary>
            Convert the passed object into an integer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.EmailEngine">
            <summary>
            Wrapper for System.Net.Mail
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.EmailEngine.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            Send mail using System.Net.Mail
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:KellermanSoftware.Common.EmailEngine.SendMail(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Send mail using System.Net.Mail
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments"></param>
        </member>
        <member name="M:KellermanSoftware.Common.EmailEngine.SendMail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send mail using System.Net.Mail
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments">Comma delimited list of attachments</param>
        </member>
        <member name="M:KellermanSoftware.Common.EmailEngine.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Send mail using System.Net.Mail
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:KellermanSoftware.Common.EmailEngineMock">
            <summary>
            Custom mock for the email engine
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.ExtractIconLogic">
            <summary>
            Unsafe code for extracting icons
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.FileUtil">
            <summary>
            File helper methods
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.TouchFile(System.String)">
            <summary>
            Update the last write time of a file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.IsUNCPath(System.String)">
            <summary>
            Returns true for a UNC Path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetSumOfFileSizeForPath(System.String)">
            <summary>
            Get a sum of the file sizes for a path and sub directories
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetFileCountForPath(System.String)">
            <summary>
            Get a count of the number of files in a path and sub directories
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetRemovableDrives">
            <summary>
            Get a list of removable drives that are ready (flash drive, SD Card, but not CD ROM/DVD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetDriveAvailableFreeSpace(System.String)">
            <summary>
            Get the available free space for a path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetDriveTotalSize(System.String)">
            <summary>
            Get the available total size for a path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetTempFileName(System.String)">
            <summary>
            Get a temporary file
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetTemporaryDirectory">
            <summary>
            Create and return a temporary directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.BackupFile(System.String,System.String,System.Int32)">
            <summary>
            Backup the specified file with the specified number of backups
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <returns>String.Empty or the file that it was backed up to</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.ExtractFileName(System.String)">
            <summary>
            Extract Filename from a path
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extracted file name</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.FindWordInFile(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if a word is found in a file
            </summary>
            <param name="filePath"></param>
            <param name="word"></param>
            <param name="caseInsensitive"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.FileExists(System.String)">
            <summary>
            Check to see if a file exists
            </summary>
            <param name="sPath">The file path</param>
            <returns>True if it exists</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.FileExists(System.String,System.String)">
            <summary>
            Returns true if there is a file that exists with the pattern
            </summary>
            <param name="path"></param>
            <param name="wildcard"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.RenameIfFileExists(System.String)">
            <summary>
            Renames the file if one exists on the same folder.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetFileSize(System.String)">
            <summary>
            Get the size of a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.PathSlash(System.String)">
            <summary>
            Ensure the passed string ends with a directory separator character unless the string is blank.
            </summary>
            <param name="path">The string to append the backslash to.</param>
            <returns>String with a "/" on the end</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetParentDirectory(System.String)">
            <summary>
            Return the parent directory for the specified path
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.ReplaceDriveLetterWithCurrent(System.String)">
            <summary>
            Replace a drive in a path with the current drive
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetCurrentDriveLetter">
            <summary>
            Get the current drive letter
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetCurrentDirectory">
            <summary>
            Get the current directory 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.GetRelativeDirectory(System.String,System.String)">
            <summary>
            Gets the relative directory.
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="pathToAppend">The path to append.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copy a directory recursively 
            </summary>
            <param name="fromPath"></param>
            <param name="toPath"></param>
            <param name="clearDestFirst">If true, destination directory will be cleared first</param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.CopyDirectory(System.String,System.String)">
            <summary>
            Copy a directory
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.CopyDirectory(System.String,System.String,System.String)">
            <summary>
            Copy a directory with specific files matching a pattern
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="searchPattern"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.CopyDirectory(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Copy a directory except for a list of files matching a pattern
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.CopyDirectory(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Copy a directory with files matching a pattern and also exclude pattern
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="searchPattern"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.DeleteDirectory(System.String)">
            <summary>
            Safe deleting a directory
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.DeleteDirectoryAndWait(System.String)">
            <summary>
            Try up to 30 seconds to delete a directory
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.CreateEmptyFile(System.String)">
            <summary>
            Create an empty file in the specified path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.OpenWithAssociatedEditor(System.String)">
            <summary>
            Open a file with the associated editor.  Also opens websites with default browser if url is passed
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.FilterFileName(System.String)">
            <summary>
            Returns a valid filename, ignoring invalid characters. Turn spaces into underscores
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.FilterFileName(System.String,System.Boolean)">
            <summary>
            Returns a valid filename, ignoring invalid characters
            </summary>
            <param name="fileName"></param>
            <param name="allowSpaces">If false, spaces will be turned into underscores</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.SerializeToXml``1(``0,System.String)">
            <summary>
            Serialize an object into XML and save to a file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.DeserializeFromXml``1(System.String)">
            <summary>
            Deserialize an XML File into an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.FileUtil.ClearReadOnlyAttributes(System.String)">
            <summary>
            Clears the read only attributes for all files in a directory
            </summary>
            <param name="source">The source directory</param>
        </member>
        <member name="T:KellermanSoftware.Common.FormatUtil">
            <summary>
            Helper functions for formatting
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.FormatUtil.FormatUSDateTime(System.DateTime)">
            <summary>
            Format a date in US Date format
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.GZip">
            <summary>
            Compress files and directories using GZip
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.GZip.CompressFile(System.String,System.String,System.IO.Compression.GZipStream)">
            <summary>
            Compress a file
            </summary>
            <param name="directory"></param>
            <param name="relativePath"></param>
            <param name="zipStream"></param>
        </member>
        <member name="M:KellermanSoftware.Common.GZip.DecompressFile(System.String,System.IO.Compression.GZipStream,KellermanSoftware.Common.GZip.ProgressDelegate)">
            <summary>
            Decompress a file using GZip
            </summary>
            <param name="inputDirectory"></param>
            <param name="zipStream"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.GZip.CompressDirectory(System.String,System.String,KellermanSoftware.Common.GZip.ProgressDelegate)">
            <summary>
            Compress a directory using GZip
            </summary>
            <param name="inputDirectory"></param>
            <param name="outputFile"></param>
            <param name="progress"></param>
        </member>
        <member name="M:KellermanSoftware.Common.GZip.DecompressToDirectory(System.String,System.String,KellermanSoftware.Common.GZip.ProgressDelegate)">
            <summary>
            Decompress a file to a directory
            </summary>
            <param name="compressedFile"></param>
            <param name="outputDirectory"></param>
            <param name="progress"></param>
        </member>
        <member name="M:KellermanSoftware.Common.GZip.DecompressToDirectory(System.IO.Stream,System.String,KellermanSoftware.Common.GZip.ProgressDelegate)">
            <summary>
            Decompress a stream to a directory
            </summary>
            <param name="compressedStream"></param>
            <param name="outputDirectory"></param>
            <param name="progress"></param>
        </member>
        <member name="T:KellermanSoftware.Common.IEmailEngine">
            <summary>
            Interface to use for mocking the Email Engine
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.EnableSsl">
            <summary>
            If true, SSL is enabled
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.Cc">
            <summary>
            Carbon Copy
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.Bcc">
            <summary>
            Blind Carbon Copy
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.ServerName">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.Port">
            <summary>
            Port of the server
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.UserName">
            <summary>
            User name to use when authenticating
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.Password">
            <summary>
            Password to use when authenticating
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.ReplyTo">
            <summary>
            The Reply to email address
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.ReplyToDisplayName">
            <summary>
            The Reply to display name
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IEmailEngine.FromDisplayName">
            <summary>
            The From Display name
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.IEmailEngine.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            Send mail
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:KellermanSoftware.Common.IEmailEngine.SendMail(System.String,System.String,System.String,System.String,System.Net.Mail.Attachment)">
            <summary>
            Send mail with an attachment
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachment"></param>
        </member>
        <member name="M:KellermanSoftware.Common.IEmailEngine.SendMail(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Send mail with multiple attachments
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments"></param>
        </member>
        <member name="M:KellermanSoftware.Common.IEmailEngine.SendMail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send mail with an attachment
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments"></param>
        </member>
        <member name="M:KellermanSoftware.Common.IEmailEngine.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Send mail using a MailMessage object
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:KellermanSoftware.Common.ILicenseInterface">
            <summary>
            Interface for dealing with licenses
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.ILicenseInterface.ExtendTrial(System.String)">
            <summary>
            Returns true if the trial extension is valid
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ILicenseInterface.TrialMessage">
            <summary>
            Get the message about the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ILicenseInterface.TrialDaysLeft">
            <summary>
            How many days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ILicenseInterface.CheckLicense">
            <summary>
            If true, the license is valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ILicenseInterface.TrialValid">
            <summary>
            If true, the trial is still valid
            </summary>
            <returns></returns>
        </member>
        <member name="P:KellermanSoftware.Common.ILicenseInterface.AdditionalInfo">
            <summary>
            Additional information about the license
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.ILicenseInterface.UserName">
            <summary>
            The user name of the licensor
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.ILicenseInterface.License">
            <summary>
            The License Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.ILicenseInterface.LicensedUser">
            <summary>
            True if it is a licensed user
            </summary>
        </member>
        <member name="T:KellermanSoftware.Common.ImageUtil">
            <summary>
            Helper utilities for dealing with images
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.ImageUtil.GetImageSize(System.String)">
            <summary>
            Get the size of an image
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Common.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br />
            No COM Interop is used<br />
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="T:KellermanSoftware.Common.ObjectUtil">
            <summary>
            Helper methods for objects
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.SerializeToFile``1(``0,System.String)">
            <summary>
            Serialize an object to a file using binary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="myObject"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.DeserializeFromFile``1(System.String)">
            <summary>
            Deserialize an object from a file using binary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.CloneWithSerialization``1(``0)">
            <summary>
            Clone an object using binary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.GetXsdType(System.Type)">
            <summary>
            Get the XSD Type for a .NET Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.GetCSharpTypeString(System.Type)">
            <summary>
            Get the CSharp Type for the passed in type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.LoadFromAssemblyImplementsInterface``1">
            <summary>
            Load all types that implement the passed interface
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.LoadFromAssemblyWhereSubclass``1">
            <summary>
            Load all types that are subclasses of the passed class
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is nullable
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.ConvertEnum``1(System.Object)">
            <summary>
            Convert object to an enum value
            </summary>
            <typeparam name="TConvertTo"></typeparam>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.GetEnumDescription(System.Enum)">
            <summary>
            Get a Description from an enum value or just the enum value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.EnumToList``1">
            <summary>
            Convert an enum to a list of string
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.EnumToDictionary``1">
            <summary>
            Convert an enum to a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.StringToEnum``1(System.String)">
            <summary>
            Convert a string or description to an enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.ShallowClone``1(``0)">
            <summary>
            Clone an object for only the primitive public properties
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.CopyList``2(System.Collections.Generic.List{``0})">
            <summary>
            Copy a list
            </summary>
            <typeparam name="TS"></typeparam>
            <typeparam name="TD"></typeparam>
            <param name="sourceList"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.CopyArray``2(``0[])">
            <summary>
            Copy an array
            </summary>
            <typeparam name="TS"></typeparam>
            <typeparam name="TD"></typeparam>
            <param name="sourceArray"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.CopyProperties``2(``0,``1)">
            <summary>
            Copy public properties from one object to another of differing types
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.CopyProperties``1(``0,``0)">
            <summary>
            Copy primitive public properties from one object to another of the same type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.ShallowCompare(System.Object,System.Object)">
            <summary>
            Performs a shallow comparison of the objects but not the child objects
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.ShallowHashCode(System.Object)">
            <summary>
            Get the hash code for the current object, not accounting for the child objects
            </summary>
            <param name="object1"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsChildType(System.Type)">
            <summary>
            Returns true if the type can have children
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsTimespan(System.Type)">
            <summary>
            Returns true if the type is a timespan
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsEnum(System.Type)">
            <summary>
            Returns true if the type is an enum
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsStruct(System.Type)">
            <summary>
            Returns true if the type is a struct
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsSimpleType(System.Type)">
            <summary>
            Returns true if a value is a simple type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsArray(System.Type)">
            <summary>
            Returns true if the type is an array
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsClass(System.Type)">
            <summary>
            Returns true if a type is a class
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsIDictionary(System.Type)">
            <summary>
            Returns true if a type is a dictionary
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ObjectUtil.IsIList(System.Type)">
            <summary>
            Returns true if a type is a list
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.Pluralization">
            <summary>
            Methods to make words plural or singular
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Pluralization.IsPlural(System.String)">
            <summary>
            Returns true if the word is plural
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Pluralization.MakePlural(System.String)">
            <summary>
            Make a word plural
            </summary>
            <param name="singular"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Pluralization.MakeSingular(System.String)">
            <summary>
            Make a word singular
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.ProcessUtil">
            <summary>
            Helper methods for dealing with processes
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.ProcessUtil.IsMediumTrustOrLess">
            <summary>
            Returns true if we are running in medium trust
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ProcessUtil.GetCurrentTrustLevel">
            <summary>
            Get the current trust level
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ProcessUtil.LaunchEmail(System.String,System.String,System.String)">
            <summary>
            Launch the associated email application
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:KellermanSoftware.Common.ProcessUtil.Shell(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
            Execute an external program.
            </summary>
            <param name="sExecutablePath">Path and filename of the executable.</param>
            <param name="sArguments">Arguments to pass to the executable.</param>
            <param name="myWindowStyle">Window style for the process (hidden, minimized, maximized, etc).</param>
            <param name="bWaitUntilFinished">Wait for the process to finish.</param>
            <returns>Exit Code</returns>
        </member>
        <member name="T:KellermanSoftware.Common.RC4Encryption">
            <summary>
            RC4 Encryption Algorithm
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.RC4Encryption.Encrypt(System.String,System.String)">
            <summary>
            Encrypt the passed string using a password
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.RC4Encryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypt the passed string using a password
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.ReflectionUtil">
            <summary>
            Reflection helping methods
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.ReflectionUtil.GetCallingInfo">
            <summary>
            Get the calling method name of the caller
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.ReflectionUtil.GetCallingStackFrame(System.Collections.Generic.List{System.String})">
            <summary>
            Get the stack frame of the calling method
            </summary>
            <param name="excludeCallingClass"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.SimpleLog">
            <summary>
            Super simple logger that logs to a file, memory, console, or event log
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.Log(System.Data.DataTable)">
            <summary>
            Log a data table
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.Log(System.Exception)">
            <summary>
            Get all the lines for an exception and log them
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.GetExceptionLines(System.Exception,System.String)">
            <summary>
            Construct a text string in the correct format for logging an exception
            </summary>
            <param name="ex">The exception to log</param>
            <param name="indent">The current indent level</param>
            <returns>A string that is structured for logging</returns>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.LogToEventLog(System.String,System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
            Create and log to a custom event log
            </summary>
            <param name="entry">The entry containing the information for the event</param>
            <returns>The success of the call</returns>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.LogToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Log to the application event log
            </summary>
            <param name="message"></param>
            <param name="logType"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.GetDataTableLines(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Construct a text string in the correct format for logging rows within a data table
            </summary>
            <param name="table">The data table to log</param>
            <param name="maxRows">The maximum number of rows to display</param>
            <param name="indent">The current indention</param>
            <returns>A string that is structured for logging</returns>
        </member>
        <member name="M:KellermanSoftware.Common.SimpleLog.Log(System.String)">
            <summary>
            Log strings to either a console, file or a memory stream depending on the user settings
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.MillisecondsToTimeLapse(System.Int64)">
            <summary>
            Convert milliseconds to elapsed time like 2 days, 4 hours, 10 minutes, 20 seconds, 120 milliseconds
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.BytesToString(System.Int64)">
            <summary>
            Convert bytes to string like 12GB
            </summary>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetInt64HashCode(System.String)">
            <summary>
            Get an Int64 hash code for a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Reverse(System.String)">
            <summary>
            Reverse the text
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.MatchWildcards(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns true if the text matches any of the wildcards
            </summary>
            <param name="value"></param>
            <param name="wildcards"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.MatchWildcard(System.String,System.String)">
            <summary>
            Returns true if the text matches the wildcard
            </summary>
            <param name="value"></param>
            <param name="wildcard"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.FilterAscii(System.String)">
            <summary>
            Exclude all characters that are not ASCII
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.IsNumeric(System.String)">
            <summary>
            Return true if the string is all numbers
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.IsDecimal(System.String)">
            <summary>
            Returns true if the string is a decimal
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.FormatName(System.String,System.String)">
            <summary>
            FormatName decodes a NameString into its component parts and returns it in a requested format.
            [H] = Full honorific
            [h] = Abbreviated honorific
            [F] = First name
            [f] = First initial
            [M] = Middle name
            [m] = Middle initial
            [L] = Last name
            [l] = Last initial
            [S] = Full suffix
            [s] = Abbreviated suffix
            [.] = Period
            [,] = Comma
            [ ] = Space
            Original TSQL by blindman
            Conversion to C# by gfinzer
            </summary>
            <param name="sName">The raw value to be parsed</param>
            <param name="sNameFormat">String that defines the output format.  Each letter in the string represents a component of the name in the order that it is to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.WordWrap(System.String,System.Int32)">
            <summary>
            Word wrap text by the number of character width
            </summary>
            <param name="stringValue"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.BreakLine(System.String,System.Int32,System.Int32)">
            <summary>
            Locates position to break the given line so as to avoid
            breaking words.
            </summary>
            <param name="text">String that contains line of text</param>
            <param name="pos">Index where line of text starts</param>
            <param name="max">Maximum line length</param>
            <returns>The modified line length</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.InWordList(System.String,System.String)">
            <summary>
            Returns true if a word is in a comma delimited word list
            </summary>
            <param name="sFind"></param>
            <param name="sWordList"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.AbbreviatedHonorific(System.String)">
            <summary>
            Returns the abbreviated honorific for the passed honorific
            </summary>
            <param name="sHonorific"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.VerboseHonorific(System.String)">
            <summary>
            Returns a verbose honorific for an abbreviated honorific
            </summary>
            <param name="sAbbreviation">Example: Dr., SGT.</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.RemoveCurrency(System.String)">
            <summary>
            Removes currency characters from a string like $, and spaces using the current culture
            </summary>
            <param name="currency">Currency string to parse</param>
            <returns>Pure currency with no formatting</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.CharString(System.Int32,System.String)">
            <summary>
            Build a string of characters
            </summary>
            <param name="amount">Number of Characters</param>
            <param name="character">The character to repeat</param>
            <returns>The repeated character string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Chr(System.Int32)">
            <summary>
            Get a string based on the specified ASCII code
            </summary>
            <param name="ASCIICode">ASCII Code</param>
            <returns>A Single Character String</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Asc(System.Char)">
            <summary>
            Get the ASCII value for the character.
            </summary>
            <param name="inChar">The character to look at.</param>
            <returns>ASCII value of the passed character.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="inString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.URLEscape(System.String)">
            <summary>
            Convert HTML special characters into HTML Codes
            </summary>
            <param name="sValue">The string to parse</param>
            <returns>HTML friendly string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Left(System.Object,System.Int32)">
            <summary>
            Get the left most characters of a string, handling null and dbnull
            </summary>
            <param name="myObject">String to parse</param>
            <param name="length">Left Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetNextWordNotInList(System.String,System.String[])">
            <summary>
            Get the next word that is not in the passed list
            </summary>
            <param name="sentence"></param>
            <param name="wordsToExclude"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetNextWordAfterCurrentWord(System.String,System.String)">
            <summary>
            Get the next word after the current specified word in a sentence
            </summary>
            <param name="sentence"></param>
            <param name="currentWord"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetAllWordsAfterCurrentWord(System.String,System.String)">
            <summary>
            Get all the words after the current word
            </summary>
            <param name="sentence"></param>
            <param name="currentWord"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.ProperCase(System.String)">
            <summary>
            Make a string proper case if it is not already proper case
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.StringBetween(System.String,System.String,System.String)">
            <summary>
            Return the string between the two words
            </summary>
            <param name="sentence"></param>
            <param name="fromWord"></param>
            <param name="toWord"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.StringBetween(System.String,System.Int32,System.String,System.String)">
            <summary>
            Return the string between the two words after specified index
            </summary>
            <param name="sentence"></param>
            <param name="startIndex"></param>
            <param name="fromWord"></param>
            <param name="toWord"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.StringAfter(System.String,System.String)">
            <summary>
            Return the string after the passed word
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.StringBefore(System.String,System.String)">
            <summary>
            Return the string before the passed word
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.ReplaceTagValue(System.String,System.String,System.String,System.String)">
            <summary>
            Replaces the tag value.
            </summary>
            <param name="text">The text.</param>
            <param name="beginTag">The begin tag.</param>
            <param name="endTag">The end tag.</param>
            <param name="replaceText">The replace text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.ReplaceTag(System.String,System.String,System.String,System.String)">
            <summary>
            Replace the text starting at the beginning tag and ending at the end tag
            </summary>
            <param name="text"></param>
            <param name="beginTag"></param>
            <param name="endTag"></param>
            <param name="replaceText"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.FilterAlphaNumeric(System.String)">
            <summary>
            Filter all characters except letters and numbers
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.FilterAlphaNumericUnderscore(System.String)">
            <summary>
            Filter out everything except for alpha, numbers, and underscore
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.CamelCase(System.String)">
            <summary>
            Return a camelCase string
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.PascalCase(System.String)">
            <summary>
            Return a PascalCase string
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.InsertSpaces(System.String)">
            <summary>
            Insert spaces into a string 
            </summary>
            <example>
            OrderDetails = Order Details
            10Net30 = 10 Net 30
            FTPHost = FTP Host
            </example> 
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.StringToList(System.String)">
            <summary>
            Take a string that is delimited by NewLine and make into a list
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.ListToString(System.Collections.Generic.List{System.String})">
            <summary>
            Take a string list and combine into a string
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sentence delimited by separator and returns the word specified by the position. Very old. This is one based instead of zero based.
            </summary>
            <param name="sentence">The string to parse</param>
            <param name="position">Which word to look for</param>
            <param name="separator">What the words are delimited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sentence">String to parse</param>
            <param name="separator">Separator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetLastWords(System.String,System.String,System.Int32)">
            <summary>
            Get the last words of a sentence. Very old, this is one based, not zero based
            </summary>
            <param name="sentence">Sentence to parse</param>
            <param name="separator">Separator Character</param>
            <param name="startWord">First word to return</param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.GetLastWord(System.String,System.String)">
            <summary>
            Gets the last word in a sentence by the separator
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="separator">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.TakeOffEnd(System.String,System.String)">
            <summary>
            Take a string off the end of another string.  Example:  1,2,3,
            </summary>
            <param name="value">The base string</param>
            <param name="takeOff">What to take off</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.TakeOffBeginning(System.String,System.String)">
            <summary>
            Take a string off the beginning of another string.  Example:  ,1,2,3
            </summary>
            <param name="value">The base string</param>
            <param name="takeOff">What to take off</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.RemoveGenericTypeFromMethod(System.String)">
            <summary>
            Get the method name without the generic type
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.ExtractNumbers(System.String)">
            <summary>
            Extract all numbers from a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.StringUtil.IsDate(System.String)">
            <summary>
            Returns true if the passed in string can be parsed as a date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.SystemInfo">
            <summary>
            Get system information using unmanaged code
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.SystemInfo.GetFreeSpace(System.String)">
            <summary>
            Get the free Megabytes for the passed drive letter
            This procedure works with Windows 98,ME,2000,XP and above
            </summary>
            <param name="drive"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemInfo.GetTotalRAM">
            <summary>
            Get the total ram available 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemInfo.GetCPUInfo">
            <summary>
            Get the CPU Information from the registry
            This procedure works for any OS
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemInfo.GetOSVersion">
            <summary>
            Get the operating System version 
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemInfo.GetOSVersionSafe">
            <summary>
            Get the operating system of the current computer
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemInfo.GetServicePack">
            <summary>
            Get the service pack installed on the current computer
            This WMI procedure works for Windows 2000 and above
            </summary>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.SystemUtil">
            <summary>
            Additional System Information
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.SystemUtil.SaveToRegistry(System.String,System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemUtil.ReadFromRegistry(System.String,System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="registryPath"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemUtil.GetUserName">
            <summary>
            Get the user name of the logged in user
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemUtil.GetCurrentTimeZone">
            <summary>
            Return the name of the current time zone accounting for Daylight Savings Time
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.SystemUtil.GetCompanyName(System.String)">
            <summary>
            Return the name of the company using an information from registry or 
            the given default value.
            </summary>
            <param name="defaultName"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.Common.Validation">
            <summary>
            Validation helper functions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Validation.IsValidVersion(System.String)">
            <summary>
            Returns true if version is either 1.0, 2.2.2 or 3.3.3.3
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Validation.IsValidURL(System.String)">
            <summary>
            Returns true if the URL is valid
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Validation.WordPattern(System.String,System.String,System.Int32)">
            <summary>
            Used for seeing when users type in invalid data into a description box
            </summary>
            <param name="sSentence"></param>
            <param name="sDelimiter"></param>
            <param name="iMinDupes"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Validation.ValidEmail(System.String)">
            <summary>
            Robust e-mail validation (takes into account ip address and valid characters)
            </summary>
            <param name="emailAddress">E-Mail Address to check</param>
            <returns>Blank if E-mail Address is valid, Error message if not.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Validation.ValidSmtpServer(System.String)">
            <summary>
            Returns true if the SMTP Server is well formatted
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
