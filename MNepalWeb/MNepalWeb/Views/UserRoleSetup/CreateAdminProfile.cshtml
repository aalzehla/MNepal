
@{
    ViewBag.Title = "Create Staff Role";
}

@model MNepalWeb.ViewModel.AdminProfileVM

<!-- =============================================== -->
<!-- Content Header (Page header) -->


<style>
    ul li {
        list-style: none;
   
         }
 
    /*.head{
    border:1px solid black;
    background-color:#e4e2e2;
    padding: 5px;
    margin-bottom:3px;
 }*/


    .child {
        width: 200px;
        margin-left: 20px;
        /*height: 75px;*/
        margin-top: 5px;
        /*margin-right: 10px;*/
        display: inline-block;
            }
</style>
<section class="content-header">
    <h1>
        @*Create Admin Profile*@
        UserRole Setup
        @*<small>Create Staff/Admin Role</small>*@
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-user"></i> UserRole Setup</a></li>
        <li class="active">@*AdminProfile*@Create Staff Role</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <!-- Main row -->
    <div class="row">

        <!-- Start Form -->
        <div class="col-md-12">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title">Create Staff Role</h3>
                </div>
                <!-- /.box-header -->
                @using (Html.BeginForm("CreateAdminProfile", "UserRoleSetup", FormMethod.Post, new
                {
                    @id = "CreateAdminForm",
                    @class = "form-horizontal"
                }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    if (ViewData["adminprofile_messsage"] != null)
                    {
                        if (ViewData["message_class"].ToString() == "success_info")
                        {
                            <div class="alert alert-success">
                                <button type="button" class="close" data-dismiss="alert">&times;</button>
                                <h4>Success</h4> @this.ViewData["adminprofile_messsage"]
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger">
                                <button type="button" class="close" data-dismiss="alert">&times;</button>
                                <h4>Error</h4> @this.ViewData["adminprofile_messsage"]
                            </div>
                        }
                    }

                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-10">

                                <div class="form-group">

                                    @Html.LabelFor(model => model.ProfileName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ProfileName, new { htmlAttributes = new { @class = "form-control", @maxlength = "20" } })

                                        <span id="check"></span>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProfileDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ProfileDesc, new { htmlAttributes = new { @class = "form-control", @maxlength = "30" } })
                                        @Html.ValidationMessageFor(model => model.ProfileDesc, "", new { @class = "text-danger" })
                                        @*, @name = "txtProfileName", @name = "txtProfileDesc"*@
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-10">
                                <div class="form-group">
                                    @Html.Label("Assign Menus", htmlAttributes: new { @class = "control-label col-md-2" })
                                </div>
                                <div class="row">
                                    <div class="col-md-3" style="text-align:left;font-weight:bold;">
                                        <input type="checkbox" id="checkall" />Module

                                    </div>
                                    <div class="col-md-9" style="text-align:left;font-weight:bold">
                                        Menus
                                    </div>
                                </div>

                                <br />
                                <div class="col-md-12">
                                    <ul>
                                        @for (int i = 0; i < Model.MNMenus.Count; i++)
                                        {

                                            if (Model.MNMenus[i].ParentMenuID == "0")
                                            {
                                                <li class="menu parent head" id="@Model.MNMenus[i].ParentMenu">
                                                    @Html.HiddenFor(x => x.MNMenus[i].Description)
                                                    @Html.HiddenFor(x => x.MNMenus[i].ParentMenuID)
                                                    @Html.HiddenFor(x => x.MNMenus[i].ParentMenu)
                                                    @Html.HiddenFor(x => x.MNMenus[i].Hierarchy)

                                                    @Html.CheckBoxFor(x => x.MNMenus[i].IsSelected, new { @class = "parentcheckbox" })
                                                    <span>@Model.MNMenus[i].Description</span>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="child" data-parent="@Model.MNMenus[i].ParentMenu">
                                                    @Html.HiddenFor(x => x.MNMenus[i].Description)
                                                    @Html.HiddenFor(x => x.MNMenus[i].ParentMenuID)
                                                    @Html.HiddenFor(x => x.MNMenus[i].ParentMenu)
                                                    @Html.HiddenFor(x => x.MNMenus[i].Hierarchy)

                                                    @Html.CheckBoxFor(x => x.MNMenus[i].IsSelected, new { @class = "childcheckbox" })
                                                    <span>@Model.MNMenus[i].Description</span>
                                                </li>
                                            }

                                        }
                                    </ul>
                                </div>
                            </div><!-- /. col-md-10-->
                        </div>
                        <!-- /. row-->
                    </div>
                    <!-- /. box-body-->

                    <div class="box-footer">
                        <div class="form-group">
                            <div class="col-md-10">
                                <input type="submit" value="Create" class="btn btn-primary pull-right" id="Submit" />
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
        <!--End Form -->

    </div>
    <!-- /.row -->
</section>
<!-- /.content -->

@section scripts{
    <script type="text/javascript">



        $(document).ready(function () {

            var parent = $('.parent');

            parent.each(function () {
                var id = $(this).attr('id');
                var child = $("[data-parent='" + id + "']");
                var newUl = $("<ul/>")   // creates a div element
                    .attr("data-child", id)  // adds the id
                    .html(child);

                $(this).append(newUl);

            });

            $('#Submit').click(function (e) {
             
                if($('.parentcheckbox:checked').length<=0)
                {
                    e.preventDefault();
                    alertify.error('Must select at least one module to create new profile');
                    return false;
                }
                
            });

            $("#checkall").change(function () {  //"select all" change
                var status = this.checked; // "select all" checked status
                $('input:checkbox').each(function () { //iterate all listed checkbox items
                    if ($(this).attr('class') != 'hide')
                        this.checked = status; //change ".checkbox" checked status
                });
            });

            $('.childcheckbox').change(function () {
                var status = this.checked;
                var parentchkbox = $(this).closest('li').data('parent');
                debugger;
                if ($('#' + parentchkbox + ' .parentcheckbox').is(':checked')) {
                    if ($(this).closest('ul').find('input[type=checkbox]:checked').length > 0) {

                        return false;
                    }
                    $('#' + parentchkbox+' .parentcheckbox').prop('checked', false);
                }
                else {
                    $('#' + parentchkbox + ' .parentcheckbox').prop('checked', true);
                }
               

            });

            $('.parentcheckbox').change(function () {
                var status = this.checked;
                var id = $(this).closest('li').attr('id');
                var child = $("ul [data-parent='" + id + "'] input[type=checkbox]");
                child.each(function () {
                    this.checked = status;
                });
                if ($("#checkall").is(':checked')) {
                    $("#checkall").prop('checked', false); 
                }
                debugger;
                if ($('ul input[type=checkbox]:checked').length == $('ul input:checkbox').length) {
                    $("#checkall").prop('checked', true);
                }
                
                //if ($('.parent input[type=checkbox]:checked').length > 0) {
                //    alert('checkedAll');
                //}
                //else {
                //    alert('checkednone');
                //}
                

            });


            //$('#tadmin01 tbody tr td:not(:first-child) input[type="checkbox"]').change(function () {
            //    debugger;
            //    var id = $(this).closest('tr').find('td:first input[type="checkbox"]').attr('id');
            //    if ($('#' + id).is(':checked')) {
            //        if ($(this).closest('tr').find('td:not(:first-child) input[type="checkbox"]').is(':checked')) {
            //            return false;
            //        }
            //        $('#' + id).prop('checked', false);
            //    }
            //    else {
            //        $('#' + id).prop('checked', true);
            //    }
            //});





            //$('input:checkbox').change(function () {
            //    //uncheck "select all", if one of the listed checkbox item is unchecked
            //    if (false == $(this).prop("checked")) { //if this item is unchecked
            //        $("#checkall").prop('checked', false); //change "select all" checked status to false
            //    }
            //    //check "select all" if all checkbox items are checked
            //    if ($('input:checkbox:checked').length == $('input:checkbox').length) {
            //        $("#checkall").prop('checked', true);
            //    }
            //});


            //$("#checkallAdmin").click(function () {
            //    $(".chkAdmin").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallCustomer").click(function () {
            //    $(".chkCustomer").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallBranchSetup").click(function () {
            //    $(".chkBranchSetup").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallAcType").click(function () {
            //    $(".chkAcType").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallMNepalPay").click(function () {
            //    $(".chkMNepalPay").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallUserSetup").click(function () {
            //    $(".chkUserSetup").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallRequest").click(function () {
            //    $(".chkRequest").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallMsg").click(function () {
            //    $(".chkMsg").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallReport").click(function () {
            //    $(".chkReport").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallPayee").click(function () {
            //    $(".chkPayee").prop('checked', $(this).prop('checked'));
            //});

            //$("#checkallSetting").click(function () {
            //    $(".chkSetting").prop('checked', $(this).prop('checked'));
            //});

        });
    </script>
    <!-- Load jQuery and the validate plugin -->
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.js"></script>
    <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
    <script src='http://cdnjs.cloudflare.com/ajax/libs/bootstrap-validator/0.4.5/js/bootstrapvalidator.min.js'></script>

    <!-- jQuery Form Validation code -->

    <script type="text/javascript">



        $(document).ready(function () {
            $('#ProfileName').change(function () {

                var PCode = $('#ProfileName').val();

                $.ajax({
                    url: '@Url.Action("CheckAdminProfile","UserRoleSetup")',
                    data: { 'ProfileName': PCode },
                    type: 'Get',
                    success: function (data) {
                        if (data == "True") {
                            $('#check').html("");
                            $('#check').css("color", "green");
                            $('#check').html("Valid").show();
                            $('#Submit').show();

                        }
                        else {
                            $('#check').html("");
                            $('#check').css("color", "red");
                            $('#check').html("Profile Name Already exists").show();
                            $('#Submit').hide();

                        }
                    },
                    error: function (data) {

                    }


                });

            });

        });



        /**Validation Check */
        $('#CreateAdminForm').bootstrapValidator({
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                ProfileName: {
                    validators: {
                        notEmpty: {
                            message: 'The ProfileName is required and cannot be empty'
                        },
                        stringLength: {
                            max: 20,
                            min: 4,
                            message: 'Please Use Profile Name, min 4 character, Max 20 character'
                        },
                        regexp: {
                            regexp: /^[\w\-\s]+$/,
                            message: 'Only Alphanumeric accepted'
                        }
                    }
                },
                ProfileDesc: {
                    validators: {
                        notEmpty: {
                            message: 'The Profile Description is required and cannot be empty'
                        },
                        stringLength: {
                            max: 30,
                            min: 4,
                            message: 'Please Use Profile Name, min 4 character, Max 20 character'
                        },
                        regexp: {
                            regexp: /^[\w\-\s]+$/,
                            message: 'Only Alphanumeric accepted'
                        }
                    }
                }
            }
        });
    </script>

}

<!-- =============================================== -->
