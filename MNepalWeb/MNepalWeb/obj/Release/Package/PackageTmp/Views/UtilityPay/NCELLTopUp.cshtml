@model MNepalWeb.Models.TopUpPay
@{
    ViewBag.Title = "NCELL TopUp";

    List<SelectListItem> TransactionMedium = new List<SelectListItem>();
    TransactionMedium.Add(new SelectListItem { Text = "Wallet", Value = "31" });
    TransactionMedium.Add(new SelectListItem { Text = "Bank", Value = "34" });

    List<SelectListItem> Amount = new List<SelectListItem>();
    Amount.Add(new SelectListItem { Text = "10", Value = "10" });
    Amount.Add(new SelectListItem { Text = "20", Value = "20" });
    Amount.Add(new SelectListItem { Text = "30", Value = "30" });
    Amount.Add(new SelectListItem { Text = "50", Value = "50" });
    Amount.Add(new SelectListItem { Text = "100", Value = "100" });
    Amount.Add(new SelectListItem { Text = "150", Value = "150" });
    Amount.Add(new SelectListItem { Text = "200", Value = "200" });
    Amount.Add(new SelectListItem { Text = "300", Value = "300" });
    Amount.Add(new SelectListItem { Text = "500", Value = "500" });
    Amount.Add(new SelectListItem { Text = "1000", Value = "1000" });
    Amount.Add(new SelectListItem { Text = "1500", Value = "1500" });
    Amount.Add(new SelectListItem { Text = "2000", Value = "2000" });
    Amount.Add(new SelectListItem { Text = "2500", Value = "2500" });
    Amount.Add(new SelectListItem { Text = "3000", Value = "3000" });
    Amount.Add(new SelectListItem { Text = "4000", Value = "4000" });
    Amount.Add(new SelectListItem { Text = "5000", Value = "5000" });

}

<!-- =============================================== -->
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        TopUp
        <small>NCELL TopUp</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-user"></i> TopUp</a></li>
        <li class="active">NCELL TopUp</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <!-- Main row -->
    <div class="row">

        <!-- Start -->
        <div class="col-xs-10">

            @using (Html.BeginForm("NCELLTopUp", "UtilityPay", FormMethod.Post, new { @id = "NCELLTopUpRegForm", @name = "NCELLTopUpRegForm", @class = "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)



                <div class="col-xs-12">


                    <div class="box box-info">
                        <div class="box-header with-border">
                            <h3 class="box-title">NCELL TopUp</h3>
                        </div>

                        @if (this.ViewData["topup_messsage"] != null)
                        {
                            if (this.ViewData["message_class"].ToString() == "success_info")
                            {
                                <div class="alert alert-success">
                                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                                    <h4>Success</h4> @this.ViewData["topup_messsage"]
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-danger">
                                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                                    <h4>Error</h4> @this.ViewData["topup_messsage"]
                                </div>
                            }
                        }

                        <!-- /.box-header -->
                        <div class="box-body">

                            <div class="form-horizontal">


                                <div class="form-group">
                                    <label class="control-label col-md-3">NCELL Mobile Number:<b style="color:red;">*</b></label>
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "10", @id = "MobileNumber", @placeholder = "NCELL Mobile Number" } })
                                        @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">

                                    <label for="@Html.NameFor(x=>x.TransactionMedium)" class="control-label col-md-3"> @Html.DisplayNameFor(x => x.TransactionMedium)<span style="color:red">*</span></label>
                                    <div class="col-md-5">

                                        @Html.DropDownListFor(model => model.TransactionMedium, new SelectList(TransactionMedium, "Value", "Text"), new { @class = "form-control", @required = "required", @style = "width: 100%;", @id = "TransactionMedium" })

                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="@Html.NameFor(x=>x.Amount)" class="control-label col-md-3"> @Html.DisplayNameFor(x => x.Amount)<span style="color:red">*</span></label>
                                    <div class="col-md-5">

                                        @Html.DropDownListFor(model => model.Amount, new SelectList(Amount, "Value", "Text"), new { @class = "form-control", @required = "required", @style = "width: 100%;", @id = "Amount" })

                                    </div>
                                </div>


                                <div class="form-group">
                                    <label for="@Html.NameFor(x=>x.PIN)" class="control-label col-md-3"> @Html.DisplayNameFor(x => x.PIN)<span style="color:red">*</span></label>
                                    <div class="col-md-5">
                                        @Html.PasswordFor(model => model.PIN, new { @class = "form-control", @required = "required", @maxlength = "4", @placeholder = "PIN" } )                                        
                                        @Html.ValidationMessageFor(model => model.PIN, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>




                        <!-- /.box-body -->

                        <div class="box-footer">
                            <input type="submit" class="btn btn-primary" name="btnCommand" value="Submit" />
                        </div>
                        <!-- /.box-footer -->
                    </div>
                    <!-- /.box -->
                    <!-- /.box-body -->
                </div>
            }
            <!-- /.row -->
            <!-- End-->


        </div>


    </div>
</section>

<!-- Load jQuery and the validate plugin -->
<script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.js"></script>

<script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
<script src='http://cdnjs.cloudflare.com/ajax/libs/bootstrap-validator/0.4.5/js/bootstrapvalidator.min.js'></script>

<!-- jQuery Form Validation code -->

<script type="text/javascript">

//Bootstrap Validation Function








    $('#NCELLTopUpRegForm').bootstrapValidator({
        feedbackIcons: {
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh'
        },
        fields: {
            MobileNumber: {
                validators: {
                    notEmpty: {
                        message: 'Mobile Number is required'
                    },
                    stringLength: {
                        max: 10,
                        min: 10,
                        message: 'The Mobile Number must be 10 digit numeric value'
                    },
                    callback: {
                        message: 'NCELL Mobile Number must start with "980", "981", "982"',
                        callback: function (value, validator, $field)
                        {

                            if ($('#MobileNumber').val().length==10)
                            {
                                var Mobile = $('#MobileNumber').val().substring(0,3);
                                var ncellStarters = ['980', '982', '981'];
                                if ($.inArray(Mobile, ncellStarters)>-1)
                                {
                                    return true;
                                }
                                else
                                {
                                    return false;
                                }
                            }
                            return true;
                        }
                    }
                }
            },
            Amount: {
                validators: {
                    integer: {
                        message: 'The value is not an integer'
                    },
                    notEmpty: {
                        message: 'The Amount is required and cannot be empty'
                    },
                    stringLength: {
                        max: 4,
                        min: 2,
                        message: 'The Amount must be more than 2 and less than 4 characters long'
                    }
                }
            },
            PIN: {
                validators: {
                    integer: {
                        message: 'The value is not an integer'
                    },
                    notEmpty: {
                        message: 'The pin is required and cannot be empty'
                    },
                    stringLength: {
                        max: 4,
                        min: 4,
                        message: 'The pin must be 4 digit numeric value'
                    }
                }
            }
        }
    });


</script>
