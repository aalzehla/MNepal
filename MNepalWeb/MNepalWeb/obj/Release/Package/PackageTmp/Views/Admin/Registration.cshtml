
@{
    ViewBag.Title = "Registration";
}

<!-- =============================================== -->
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Admin
        <small>Registration</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-user"></i> Admin</a></li>
        <li class="active"> Registration</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <!-- Main row -->
    <div class="row">

        @using (Html.BeginForm("Registration", "Admin", FormMethod.Post, new { @id = "AdminRegForm", @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            if (this.ViewData["registration_message"] != null)
            {
                if (this.ViewData["message_class"].ToString() == "success_info")
                {
                    <div class="alert alert-success">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        <h4>Success</h4> @this.ViewData["registration_message"]
                    </div>
                }
                else
                {
                    <div class="alert alert-danger">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        <h4>Error</h4> @this.ViewData["registration_message"]
                    </div>
                }
            }

            <!-- Start -->
            <div class="col-xs-10">

                <div class="box box-info" style="display:none;">
                    <div class="box-header with-border">
                        <h3 class="box-title">Information</h3>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">ClientCode</label>
                                    <div class="col-sm-9">
                                        <input type="number" class="form-control" id="CClientCode" name="txtCClientCode" value="@ViewBag.CClientCode">
                                        <input type="text" class="form-control" id="UserType" name="txtUserType" value="@ViewBag.User">
                                    </div>
                                </div>
                            </div>
                            <!-- /.col -->
                            
                        </div>

                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->

                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Admin Registration</h3>
                    </div>
                    <!-- /.box-header -->

                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">UserName:<b style="color:red;">*</b></label>
                                    <div class="col-sm-9">
                                        <input type="email" class="form-control" id="UserName" name="txtUserName" required placeholder="Please use Email address" />
                                        <label id="check"> Please use Email Address </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">Full Name:<b style="color:red;">*</b></label>
                                    <div class="col-sm-9">
                                        <input type="text" class="form-control" id="FName" name="txtFirstName" placeholder="Full Name"  required/>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">
                                        Email Address<b style="color:red;">*</b>
                                    </label>
                                    <div class="col-sm-9">
                                        <input type="email" class="form-control" id="Email" name="txtEmail" required/>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.row-->

                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">Branch:<b style="color:red;">*</b></label>
                                    <div class="col-sm-9">
                                        @Html.DropDownList("BranchName", (IEnumerable<SelectListItem>)ViewBag.BranchName, "-- Select --", new { @class = "form-control select2", @id = "branchName", @name = "txtBranchName", @required="Required"})
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.row-->

                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">
                                        Allowed Push SMS(Maximum)<b style="color:red;"></b>
                                    </label>
                                    <div class="col-sm-9">
                                        <input type="text" class="form-control" id="PushSMS" name="txtPushSMS" value="0" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.row-->

                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3">
                                        Profile Name<b style="color:red;">*</b>
                                    </label>
                                    <div class="col-sm-7">
                                        @Html.DropDownList("ProfileName", (IEnumerable<SelectListItem>)ViewBag.ProfileName,
                                       "-- Select --", new
                                       {
                                           @class = "form-control select2",
                                           @id = "profileName",
                                           @name = "txtProfileName",
                                           @required = "Required"
                                       }) 
                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.row-->


                        <div class="row">
                            <div class="col-md-10">
                                <div class="form-group">
                                    <label class="control-label col-sm-3"> &nbsp;</label>
                                    <div class="col-sm-9">
                                        <input type="checkbox" id="COC" name="txtCOC" value="T" />Centralized Operation Contol
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                    <!-- /.box-body -->

                    <div class="box-footer">
                        <input type="submit" class="btn btn-primary" name="btnCommand" value="Submit" />
                    </div>
                    <!-- /.box-footer -->
                </div>
                <!-- /.box -->
                
                <!-- /.box-body -->
            </div>
            <!-- col-xs-10-->

            <!-- End-->
        }

    </div>
    <!-- /.row -->
</section>
<!-- /.content -->
<!-- =============================================== -->

@section scripts {

    <!-- Load jQuery and the validate plugin -->
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.js"></script>

    <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
    <script src='http://cdnjs.cloudflare.com/ajax/libs/bootstrap-validator/0.4.5/js/bootstrapvalidator.min.js'></script>

    <!-- jQuery Form Validation code -->

    <script type="text/javascript">

        $('#UserName').change(function () {
            $('#Email').val($(this).val());
        });

        $('#FName').change(function () {
            $('#ProfileName').val($(this).val());
        });

        function edValueKeyPress() {
            var edValue = document.getElementById("BankAccountNumber");
            var str = edValue.value;
            var result = str.substr(0, 3);
            $('#BranchCode').val(result);
        }

        $("#UserName").change(function (event) {
            event.preventDefault();

            var id = $("#UserName").val();
            
            $.ajax({
                cache: false,
                type: "GET",
                url: '@Url.Action("GetCheckingUserName", "Customer")',
                data: { "Username": id },
                success: function (data, textStatus) {
                    var markup = data;
                    if (data == "Success") {
                        $("#check").html("");
                        $("#check").css("color", "green");
                        $("#check").html("Validate").show();
                    }
                    else {
                        $("#check").html("");
                        $("#check").css("color", "red");
                        $("#check").html(markup).show();
                    }
                },
                error: function () {
                    alert("Data Not Found");
                }
            });
        });


    //var selectedID = $('#WBankCode option:selected').text();
    //alert(selectedID)
    //var selectedValID = $('#WBankCode option:selected').val();

    //var seleWName = document.getElementById('WBankName').value;
    //var sele = document.getElementById('WBankCode').value;

    $(document).ready(function () {

        //$("#WBranchCode").prop("disabled", true);
        $("#BranchCode").prop("disabled", true);

        @*if (seleWName == "Pumori Bank") {
            var id = $("#WBankCode").val();
            $.ajax({
                cache: false,
                type: "GET",
                url: '@Url.Action("GetPopulateBankCode", "Agent")',
                data: { "BankCode": id },
                success: function (data, textStatus) {

                    $("#WBranchCode").html("");
                    var markup;// = "<option value='0'>Select</option>";
                    for (var x = 0; x < data.length; x++) {
                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                    }
                    $("#WBranchCode").html(markup).show();

                    $("#WBranchCode").prop("disabled", false);
                },
                error: function () {
                    alert("Data Not Found");
                }
            });
        }*@


        @*$("#WBankCode").change(function () {
            var id = $("#WBankCode").val();
            $.ajax({
                cache: false,
                type: "GET",
                url: '@Url.Action("GetPopulateBankCode", "Agent")',
                data: { "BankCode": id },
                success: function (data, textStatus) {

                    $("#WBranchCode").html("");
                    var markup = "<option value='0'>Select</option>";
                    for (var x = 0; x < data.length; x++) {
                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                    }
                    $("#WBranchCode").html(markup).show();

                    $("#WBranchCode").prop("disabled", false);
                },
                error: function () {
                    alert("Data Not Found");
                }
            });
        });*@

        /**Validation Check */
        $('#AdminRegForm').bootstrapValidator({
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                txtUserName: {
                    validators: {
                        emailAddress: {
                            message: 'The email address is not valid.'
                        },
                        notEmpty: {
                            message: 'The UserName is required and cannot be empty'
                        }
                    }
                },
                txtFirstName: {
                    validators: {
                        notEmpty: {
                            message: 'The Full Name is required and cannot be empty'
                        },
                        regexp: {
                            regexp: /^[a-zA-Z ]+$/,
                            message: 'Your Full name cannot have numbers or symbols'
                        }
                    }
                },
                txtEmail: {
                    validators: {
                        emailAddress: {
                            message: 'The email address is not valid.'
                        },
                        notEmpty: {
                            message: 'The UserName is required and cannot be empty'
                        }
                    }
                },
                txtUserType: {
                    validators: {
                        notEmpty: {
                            message: 'The UserType is required and cannot be empty'
                        }
                    }
                }
            }
        });

        });
    </script>
}

<!-- =============================================== -->

@*//txtPassword: {
                    validators: {
                        notEmpty: {
                            message: 'The Password is required and cannot be empty'
                        },
                        stringLength: {
                            max: 12,
                            min: 8,
                            message: 'The Password must be more than 8 and less than 12 characters long'
                        }
                    }
                },

                txtStatus: {
                    validators: {
                        notEmpty: {
                            message: 'The Status is required and cannot be empty'
                        }
                    }
                },
                txtIsApproved: {
                    validators: {
                        notEmpty: {
                            message: 'The IsApproved is required and cannot be empty'
                        }
                    }
                },
                txtIsRejected: {
                    validators: {
                        notEmpty: {
                            message: 'The IsRejected is required and cannot be empty'
                        }
                    }
                },
                txtContactNumber1: {
                    validators: {
                        integer: {
                            message: 'The value is not an integer'
                        },
                        notEmpty: {
                            message: 'The Mobile No is required and cannot be empty'
                        },
                        stringLength: {
                            max: 10,
                            min: 10,
                            message: 'Mobile number is not valid'
                        }
                    }
                }
    txtLastName: {
                //    validators: {
                //        notEmpty: {
                //            message: 'The Last Name is required and cannot be empty'
                //        }
                //    }
                //},
                //txtAddress: {
                //    validators: {
                //        notEmpty: {
                //            message: 'The Address is required and cannot be empty'
                //        }
                //    }
                //},
                //txtWardNo: {
                //    validators: {
                //        notEmpty: {
                //            message: 'The Ward No is required and cannot be empty'
                //        }
                //    }
                //},
                //txtDistrict: {
                //    validators: {
                //        notEmpty: {
                //            message: 'The District is required and cannot be empty'
                //        }
                //    }
                //},
                //txtZone: {
                //    validators: {
                //        notEmpty: {
                //            message: 'The Zone is required and cannot be empty'
                //        }
                //    }
                //},
    //txtPin: {
                //    validators: {
                //        integer: {
                //            message: 'The value is not an integer'
                //        },
                //        notEmpty: {
                //            message: 'The new pin is required and cannot be empty'
                //        },
                //        stringLength: {
                //            max: 4,
                //            min: 4,
                //            message: 'The new pin must be 4 digit numeric password only'
                //        }
                //    }
                //},,
                txtBankAccountNumber: {
                    validators: {
                        stringLength: {
                            max: 14,
                            min: 14,
                            message: 'The BankAccountNumber must be 14 digit numeric'
                        }
                    }
                },
                txtWBankCode: {
                    validators: {
                        notEmpty: {
                            message: 'The WalletNumber is required and cannot be empty'
                        }
                    }
                },
                txtWalletNumber: {
                    validators: {
                        notEmpty: {
                            message: 'The WalletNumber is required and cannot be empty'
                        },
                        stringLength: {
                            max: 16,
                            min: 16,
                            message: 'The WalletNumber must be 16 digit numeric number'
                        }
                    }
                }*@