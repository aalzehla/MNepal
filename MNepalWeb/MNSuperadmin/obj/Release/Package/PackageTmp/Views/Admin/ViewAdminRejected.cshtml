@model MNSuperadmin.Models.UserInfo

@{
    ViewBag.Title = "ViewAdminRejected";
    List<SelectListItem> Status = new List<SelectListItem>();
    Status.Add(new SelectListItem { Text = "Active", Value = "Active" });
    Status.Add(new SelectListItem { Text = "InActive", Value = "InActive" });



}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Admin
        <small>Modification Rejected</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-user"></i> Admin</a></li>
        <li class="active">Modification Rejected</li>
        <li class="active">Update Modification</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <!-- Main row -->
    <div class="row">

        <!-- Start Form -->
        <div class="col-md-12">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title">Update Modification</h3>
                </div>
                <!-- /.box-header -->

                @using (Html.BeginForm("ApproveAdminRejected", "Admin", FormMethod.Post, new { @id = "ViewAdminRejected", @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()

                    if (this.TempData["editregister_messsage"] != null)
                    {
                        if (this.TempData["message_class"].ToString() == "success_info")
                        {
                            <div class="alert alert-success">
                                <button type="button" class="close" data-dismiss="alert">&times;</button>
                                <h4>Success</h4> @this.TempData["editregister_messsage"]
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger">
                                <button type="button" class="close" data-dismiss="alert">&times;</button>
                                <h4>Error</h4> @this.TempData["registration_message"]
                            </div>
                        }
                    }
                    <div class="box-body">

                        <div class="form-horizontal">

                            <div class="form-group" style="display:none;">
                                @Html.LabelFor(model => model.ClientCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.ClientCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.ClientCode, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" style="display:none;">
                                @Html.LabelFor(model => model.UserType, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.UserType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.UserType, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @maxlength = "40" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="form-group">
                                <label class="control-label col-md-2">
                                    Email Address<b style="color:red;">*</b>
                                </label>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.EmailAddress, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control"

                                   }
                               })
                                    @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                </div>

                            </div>




                            <div class="form-group">

                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.TextBoxFor(model => model.Status, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>


                            <div class="form-group">
                                <label class="control-label col-md-2">Branch Name <b style="color:red;">*</b></label>
                                <div class="col-md-5">

                                    @Html.DropDownListFor(x => x.BranchCode, new SelectList(ViewBag.BranchName, "Value", "Text"), "Select Branch", new
                               {
                                   @class = "form-control select2",
                                   @id = "branchName",
                                   @required = "required"

                               })

                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">
                                    Role <b style="color:red;">*</b>
                                </label>
                                <div class="col-md-5">
                                    @Html.DropDownListFor(x => x.ProfileName, new SelectList(ViewBag.AdminProfile, "Value", "Text"), "Choose  Profile Name", new
                               {
                                   @class = "form-control select2",
                                   @id = "profileName",
                                   @required = "required"


                               })





                                    @*<input type="checkbox" id="COC" name="COC" value="T" @(Model.COC.ToString() == "T" ? "Checked" : string.Empty)> <span>Centralized Operation Contol</span>*@

                                </div>

                            </div>
                            <!--Remarks-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @readonly = "readonly", @maxlength = "200", @rows = "4", @cols = "50", @style = "min-height:50px;min-width:200px;max-height:100px;max-width:380px;" })

                                    @*<textarea name="Remarks" id="txtRemarks" maxlength="200" rows="4" cols="50" style="min-height:50px;min-width:200px;max-height:100px;max-width:380px;" class="form-control"></textarea>*@

                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div>
                                <div class="col-md-10">
                                    <div class="form-group">
                                        <label class="control-label col-sm-3"> &nbsp;</label>
                                        <div class="col-sm-9">
                                            <input type="checkbox" id="COC" name="COC" value="T" @(Model.COC.ToString() == "T" ? "Checked" : string.Empty) /> <span>Centralized Operation Contol</span>

                                        </div>
                                    </div>
                                </div>
                            </div>



                            <div class="form-group" style="display:none;">
                                @Html.LabelFor(model => model.IsRejected, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.IsRejected, new SelectList(new[] {
                       new { Value = "T", Text = "T"},
                       new { Value="F",Text="F" } },
        "Value", "Text"), "--Select --", new { required = "required", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IsRejected, "", new { @class = "text-danger" })
                                </div>
                            </div>



                        </div>
                    </div>
        <!-- /. box-body-->

                    <div class="row">
                        <div class="footer fixed">

                            <div class="col-md-12">
                                <div class="row">
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <input type="submit" class="btn btn-primary pull-right" id="btnCommand" name="btnCommand" value="Submit">
                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group">
                                            @*<input type="submit" class="btn btn-primary pull-right" id="btnCancel" name="btnCancel" value="Cancel">*@
                                            <a href="@Url.Action("RejectedList","Admin")" class="btn btn-primary pull-right">Cancel</a>
                                        </div>
                                    </div>
                                </div>
                            </div>



                        </div>
                    </div>
                }

            </div>
        </div>
        <!--End Form -->

    </div>
    <!-- /.row -->
</section>

<!-- /.content -->

@section scripts {

    <!-- Load jQuery and the validate plugin -->
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.js"></script>

    <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
    <script src='http://cdnjs.cloudflare.com/ajax/libs/bootstrap-validator/0.4.5/js/bootstrapvalidator.min.js'></script>

    <!-- jQuery Form Validation code -->
    /////////
    <script type="text/javascript">
        $(document).ready(function () {
            /**Validation Check */
            $('#ViewAdminRejected').bootstrapValidator({
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {



                    Name: {
                        validators: {
                            notEmpty: {
                                message: 'The Full Name is required and cannot be empty'
                            },
                            regexp: {
                                regexp: /^[a-zA-Z ]+$/,
                                message: 'Your Full name cannot have numbers or symbols'
                            }
                        }
                    },

                    EmailAddress: {
                        validators: {
                            regexp: {
                                regexp: /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/,
                                message: 'Email Address is not valid'
                            },
                            notEmpty: {
                                message: 'The Email is required and cannot be empty'
                            }
                        }
                    }
                }
            });
        });
    </script>



}




